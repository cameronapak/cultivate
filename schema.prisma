// datasource db {
//   provider = "sqlite"
//   // Wasp requires that the url is set to the DATABASE_URL environment variable.
//   url      = env("DATABASE_URL")
// }

datasource db {
  provider = "postgresql"
  url      = env("DATABASE_URL")
}

// Wasp requires the `prisma-client-js` generator to be present.
generator client {
  provider = "prisma-client-js"
}

model Project {
  id            Int        @id @default(autoincrement())
  title         String
  description   String?
  emoji         String?    // Optional emoji field
  tasks         Task[]
  taskOrder     Int[]      @default([]) // Array of task IDs in sorted order
  resourceOrder Int[]      @default([]) // Array of resource IDs in sorted order
  pitch         Pitch?
  resources     Resource[]
  thoughts      Thought[]
  pinned        Boolean    @default(false)
  createdAt     DateTime   @default(now())
  updatedAt     DateTime @updatedAt
  userId        Int?
  user          User?      @relation(fields: [userId], references: [id])
}

model Pitch {
  id            Int      @id @default(autoincrement())
  title         String
  problem       String
  appetite      String
  solution      String
  rabbitHoles   String?
  noGos         String?
  audience      String?
  insights      String?
  successMetrics String?
  project       Project  @relation(fields: [projectId], references: [id], onDelete: Cascade)
  projectId     Int      @unique
  createdAt     DateTime @default(now())
  updatedAt     DateTime @updatedAt
}

model Task {
  id          Int      @id @default(autoincrement())
  title       String
  description String?
  complete    Boolean  @default(false)
  status      String   @default("TODO") // Using String instead of enum
  createdAt   DateTime @default(now())
  updatedAt   DateTime @updatedAt
  project     Project? @relation(fields: [projectId], references: [id], onDelete: Cascade)
  projectId   Int?
  user        User?    @relation(fields: [userId], references: [id])
  userId      Int?
}

model Thought {
  id          String   @id @default(uuid())
  content     String
  createdAt   DateTime @default(now())
  updatedAt   DateTime @updatedAt
  project     Project? @relation(fields: [projectId], references: [id], onDelete: Cascade)
  projectId   Int?
  user        User?    @relation(fields: [userId], references: [id])
  userId      Int?
}

model Resource {
  id          Int      @id @default(autoincrement())
  url         String
  title       String
  description String?
  createdAt   DateTime @default(now())
  updatedAt   DateTime @updatedAt
  project     Project? @relation(fields: [projectId], references: [id], onDelete: Cascade)
  projectId   Int?
  user        User?    @relation(fields: [userId], references: [id])
  userId      Int?
}

model Document {
  id          String   @id @default(uuid())
  title       String
  content     String
  createdAt   DateTime @default(now())
  updatedAt   DateTime @updatedAt
  isPublished Boolean  @default(false)
  user        User?    @relation(fields: [userId], references: [id])
  userId      Int?
}

model Canvas {
  id          String   @id @default(uuid())
  snapshot    String   // Stores the Tldraw snapshot as JSON
  createdAt   DateTime @default(now())
  updatedAt   DateTime @updatedAt
  user        User?    @relation(fields: [userId], references: [id])
  userId      Int?
  title       String   @default("Untitled Canvas")
  description String?
}

model User {
  id        Int        @id @default(autoincrement())
  tasks     Task[]
  resources Resource[]
  documents Document[]
  canvases  Canvas[]
  projects  Project[]
  thoughts  Thought[]
  
  // Invite codes generated by this user
  generatedInvites InviteCode[] @relation("GeneratedInvites")
  
  // Invite code claimed by this user during signup
  claimedInvite    InviteCode?  @relation("ClaimedInvite")
}

model InviteCode {
  id              Int      @id @default(autoincrement())
  code            String   @unique // The unique invite code string
  isClaimed       Boolean  @default(false) // Whether the code has been used
  createdAt       DateTime @default(now())
  
  // Who generated this code?
  generatedByUser User     @relation("GeneratedInvites", fields: [generatedByUserId], references: [id])
  generatedByUserId Int
  
  // Who claimed this code upon signup?
  claimedByUser   User?    @relation("ClaimedInvite", fields: [claimedByUserId], references: [id])
  claimedByUserId Int?     @unique // A user can only claim one invite code
}
