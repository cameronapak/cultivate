app shapeUp {
  wasp: {
    version: "^0.16.2"
  },
  title: "shape-up"
}

route RootRoute { path: "/", to: MainPage }
page MainPage {
  component: import { MainPage } from "@src/MainPage"
}

route ProjectRoute { path: "/projects/:projectId", to: ProjectPage }
page ProjectPage {
  component: import { ProjectPage } from "@src/ProjectPage"
}

route InboxRoute { path: "/inbox", to: InboxPage }
page InboxPage {
  component: import { InboxPage } from "@src/InboxPage"
}

route DocumentsRoute { path: "/documents", to: DocumentsPage }
page DocumentsPage {
  component: import { DocumentsPage } from "@src/DocumentsPage"
}

route DocumentRoute { path: "/documents/:documentId", to: DocumentPage }
page DocumentPage {
  component: import { DocumentPage } from "@src/DocumentPage"
}

route CreateDocumentRoute { path: "/documents/new", to: CreateDocumentPage }
page CreateDocumentPage {
  component: import { CreateDocumentPage } from "@src/CreateDocumentPage"
}

query getProjects {
  // Specifies where the implementation for the query function is.
  // The path `@src/queries` resolves to `src/queries.ts`.
  // No need to specify an extension.
  fn: import { getProjects } from "@src/queries",
  // Tell Wasp that this query reads from the `Task` entity. Wasp will
  // automatically update the results of this query when tasks are modified.
  entities: [Project, Task, Pitch, Resource]
}

query getProject {
  fn: import { getProject } from "@src/queries",
  entities: [Project, Task, Pitch, Resource]
}

query getProjectTasks {
  fn: import { getProjectTasks } from "@src/queries",
  entities: [Project, Task]
}

query getProjectPitches {
  fn: import { getProjectPitches } from "@src/queries",
  entities: [Project, Pitch]
}

query getProjectResources {
  fn: import { getProjectResources } from "@src/queries",
  entities: [Project, Resource]
}

query getInboxTasks {
  fn: import { getInboxTasks } from "@src/queries",
  entities: [Task]
}

query getDocument {
  fn: import { getDocument } from "@src/queries",
  entities: [Document]
}

query getDocuments {
  fn: import { getDocuments } from "@src/queries",
  entities: [Document]
}

action createProject {
  fn: import { createProject } from "@src/queries",
  entities: [Project]
}

action updateProject {
  fn: import { updateProject } from "@src/queries",
  entities: [Project]
}

action deleteProject {
  fn: import { deleteProject } from "@src/queries",
  entities: [Project]
}

action createPitch {
  fn: import { createPitch } from "@src/queries",
  entities: [Project, Pitch]
}

action updatePitch {
  fn: import { updatePitch } from "@src/queries",
  entities: [Pitch]
}

action deletePitch {
  fn: import { deletePitch } from "@src/queries",
  entities: [Pitch]
}

action createTask {
  fn: import { createTask } from "@src/queries",
  entities: [Project, Task]
}

action updateTask {
  fn: import { updateTask } from "@src/queries",
  entities: [Task]
}

action updateTaskStatus {
  fn: import { updateTaskStatus } from "@src/queries",
  entities: [Task]
}

action deleteTask {
  fn: import { deleteTask } from "@src/queries",
  entities: [Task]
}

action createResource {
  fn: import { createResource } from "@src/queries",
  entities: [Project, Resource]
}

action updateResource {
  fn: import { updateResource } from "@src/queries",
  entities: [Resource]
}

action deleteResource {
  fn: import { deleteResource } from "@src/queries",
  entities: [Resource]
}

action moveTask {
  fn: import { moveTask } from "@src/queries",
  entities: [Task, Project]
}

action createDocument {
  fn: import { createDocument } from "@src/queries",
  entities: [Document]
}

action updateDocument {
  fn: import { updateDocument } from "@src/queries",
  entities: [Document]
}

action deleteDocument {
  fn: import { deleteDocument } from "@src/queries",
  entities: [Document]
}