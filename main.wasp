app shapeUp {
  wasp: {
    version: "^0.16.2"
  },
  title: "Cultivate",
  auth: {
    // Tells Wasp which entity to use for storing users.
    userEntity: User,
    methods: {
      // Enable username and password auth.
      usernameAndPassword: {}
    },
    // We'll see how this is used in a bit.
    onAuthFailedRedirectTo: "/login"
  }
}

route RootRoute { path: "/", to: MainPage }
page MainPage {
  authRequired: true,
  component: import { MainPage } from "@src/pages/MainPage"
}

route SignupRoute { path: "/signup", to: SignupPage }
page SignupPage {
  component: import { SignupPage } from "@src/pages/SignupPage"
}

route LoginRoute { path: "/login", to: LoginPage }
page LoginPage {
  component: import { LoginPage } from "@src/pages/LoginPage"
}

// route CanvasCreateRoute { path: "/canvas/new", to: CanvasCreatePage }
// page CanvasCreatePage {
//   component: import { CanvasCreatePage } from "@src/client/pages/CanvasCreatePage"
// }

// route CanvasesRoute { path: "/canvases", to: CanvasesPage }
// page CanvasesPage {
//   component: import { CanvasesPage } from "@src/client/pages/CanvasesPage"
// }

// route CanvasRoute { path: "/canvas/:id", to: CanvasPage }
// page CanvasPage {
//   component: import { CanvasPage } from "@src/client/pages/CanvasPage"
// }

route ProjectRoute { path: "/projects/:projectId", to: ProjectPage }
page ProjectPage {
  authRequired: true,
  component: import { ProjectPage } from "@src/pages/ProjectPage"
}

route InboxRoute { path: "/inbox", to: InboxPage }
page InboxPage {
  authRequired: true,
  component: import { InboxPage } from "@src/pages/InboxPage"
}

route DocumentsRoute { path: "/documents", to: DocumentsPage }
page DocumentsPage {
  authRequired: true,
  component: import { DocumentsPage } from "@src/pages/DocumentsPage"
}

route DocumentRoute { path: "/documents/:documentId", to: DocumentPage }
page DocumentPage {
  authRequired: true,
  component: import { DocumentPage } from "@src/pages/DocumentPage"
}

route CreateDocumentRoute { path: "/documents/new", to: CreateDocumentPage }
page CreateDocumentPage {
  authRequired: true,
  component: import { CreateDocumentPage } from "@src/pages/CreateDocumentPage"
}

// Add new shared document route that doesn't require auth
route SharedDocumentRoute { path: "/shared/:documentId", to: SharedDocumentPage }
page SharedDocumentPage {
  component: import { SharedDocumentPage } from "@src/pages/SharedDocumentPage"
}

query getProjects {
  // Specifies where the implementation for the query function is.
  // The path `@src/queries` resolves to `src/queries.ts`.
  // No need to specify an extension.
  fn: import { getProjects } from "@src/queries",
  // Tell Wasp that this query reads from the `Task` entity. Wasp will
  // automatically update the results of this query when tasks are modified.
  entities: [Project, Task, Pitch, Resource]
}

query getProject {
  fn: import { getProject } from "@src/queries",
  entities: [Project, Task, Pitch, Resource]
}

query getProjectTasks {
  fn: import { getProjectTasks } from "@src/queries",
  entities: [Project, Task]
}

query getProjectPitches {
  fn: import { getProjectPitches } from "@src/queries",
  entities: [Project, Pitch]
}

query getProjectResources {
  fn: import { getProjectResources } from "@src/queries",
  entities: [Project, Resource]
}

query getInboxTasks {
  fn: import { getInboxTasks } from "@src/queries",
  entities: [Task]
}

query getInboxResources {
  fn: import { getInboxResources } from "@src/queries",
  entities: [Resource]
}

query getDocument {
  fn: import { getDocument } from "@src/queries",
  entities: [Document]
}

query getPublicDocument {
  fn: import { getPublicDocument } from "@src/queries",
  entities: [Document]
}

query getDocuments {
  fn: import { getDocuments } from "@src/queries",
  entities: [Document]
}

action createProject {
  fn: import { createProject } from "@src/queries",
  entities: [Project]
}

action updateProject {
  fn: import { updateProject } from "@src/queries",
  entities: [Project]
}

action deleteProject {
  fn: import { deleteProject } from "@src/queries",
  entities: [Project]
}

action createPitch {
  fn: import { createPitch } from "@src/queries",
  entities: [Project, Pitch]
}

action updatePitch {
  fn: import { updatePitch } from "@src/queries",
  entities: [Pitch]
}

action deletePitch {
  fn: import { deletePitch } from "@src/queries",
  entities: [Pitch]
}

action createTask {
  fn: import { createTask } from "@src/queries",
  entities: [Project, Task]
}

action updateTask {
  fn: import { updateTask } from "@src/queries",
  entities: [Task]
}

action updateTaskStatus {
  fn: import { updateTaskStatus } from "@src/queries",
  entities: [Task]
}

action deleteTask {
  fn: import { deleteTask } from "@src/queries",
  entities: [Task]
}

action createResource {
  fn: import { createResource } from "@src/queries",
  entities: [Project, Resource]
}

action updateResource {
  fn: import { updateResource } from "@src/queries",
  entities: [Resource]
}

action deleteResource {
  fn: import { deleteResource } from "@src/queries",
  entities: [Resource]
}

action moveTask {
  fn: import { moveTask } from "@src/queries",
  entities: [Task, Project]
}

action moveResource {
  fn: import { moveResource } from "@src/queries",
  entities: [Resource, Project]
}

action createDocument {
  fn: import { createDocument } from "@src/queries",
  entities: [Document]
}

action updateDocument {
  fn: import { updateDocument } from "@src/queries",
  entities: [Document]
}

action deleteDocument {
  fn: import { deleteDocument } from "@src/queries",
  entities: [Document]
}

//#region Canvas - Not implemented
action saveCanvas {
  fn: import { saveCanvas } from "@src/queries",
  entities: [Canvas]
}

query loadCanvas {
  fn: import { loadCanvas } from "@src/queries",
  entities: [Canvas]
}

query getCanvases {
  fn: import { getCanvases } from "@src/queries",
  entities: [Canvas]
}

action createCanvas {
  fn: import { createCanvas } from "@src/queries",
  entities: [Canvas]
}

action deleteCanvas {
  fn: import { deleteCanvas } from "@src/queries",
  entities: [Canvas]
}
//#endregion