app shapeUp {
  wasp: {
    version: "^0.16.2"
  },
  title: "Cultivate - A Calm PKM Tool",
  client: {
    setupFn: import { setupClient } from "@src/client/setup"
  },
  db: {
    // system: PostgreSQL, // Assuming PostgreSQL is default or set elsewhere
    // Add the seed function to the list
    seeds: [
      import { seedDevInviteCode } from "@src/server/scripts/seedDevData.js"
    ]
  },
  auth: {
    // Tells Wasp which entity to use for storing users.
    userEntity: User,
    methods: {
      // Enable username and password auth.
      usernameAndPassword: {}
    },
    // We'll see how this is used in a bit.
    onAuthFailedRedirectTo: "/login"
  },
  head: [
    "<meta name=\"description\" content=\"Imagine if Notion & Basecamp had a baby. Cultivate is a PKM tool where you can calmly brain dump, write, manage projects, and get things done.\" />",
    "<link rel=\"icon\" type=\"image/x-icon\" href=\"/favicon.ico\" />",
    "<link rel=\"icon\" type=\"image/png\" sizes=\"32x32\" href=\"/favicon-32x32.png\" />",
    "<link rel=\"icon\" type=\"image/png\" sizes=\"16x16\" href=\"/favicon-16x16.png\" />",
    "<link rel=\"apple-touch-icon\" href=\"/apple-touch-icon.png\" />",
    "<link rel=\"manifest\" href=\"/site.webmanifest\" />",
    "<meta property=\"og:url\" content=\"https://cultivate.so\" />",
    "<meta property=\"og:type\" content=\"website\" />",
    "<meta property=\"og:title\" content=\"Cultivate\" />",
    "<meta property=\"og:description\" content=\"\" />",
    "<meta property=\"og:image\" content=\"/og-image.png\" />",
    "<meta name=\"twitter:card\" content=\"summary_large_image\" />",
    "<meta property=\"twitter:domain\" content=\"cultivate.so\" />",
    "<meta property=\"twitter:url\" content=\"https://cultivate.so\" />",
    "<meta name=\"twitter:title\" content=\"Cultivate\" />",
    "<meta name=\"twitter:description\" content=\"\" />",
    "<meta name=\"twitter:image\" content=\"/og-image.png\" />"
  ]
}

route RootRoute { path: "/", to: MainPage }
page MainPage {
  authRequired: true,
  component: import { ProjectsPage } from "@src/pages/ProjectsPage"
}

route SignUpRoute { path: "/signup", to: SignUpPage }
page SignUpPage {
  component: import { SignUpPage } from "@src/pages/SignUpPage"
}

route LoginRoute { path: "/login", to: LoginPage }
page LoginPage {
  component: import { LoginPage } from "@src/pages/LoginPage"
}

route CanvasesRoute { path: "/canvases", to: CanvasesPage }
page CanvasesPage {
  authRequired: true,
  component: import { CanvasesPage } from "@src/client/pages/CanvasesPage"
}

route CanvasRoute { path: "/canvas/:id", to: CanvasPage }
page CanvasPage {
  authRequired: true,
  component: import { CanvasPage } from "@src/client/pages/CanvasPage"
}

route ProjectRoute { path: "/projects/:projectId", to: ProjectPage }
page ProjectPage {
  authRequired: true,
  component: import { ProjectPage } from "@src/pages/ProjectPage"
}

route InboxRoute { path: "/inbox", to: InboxPage }
page InboxPage {
  authRequired: true,
  component: import { InboxPage } from "@src/pages/InboxPage"
}

route DocumentsRoute { path: "/documents", to: DocumentsPage }
page DocumentsPage {
  authRequired: true,
  component: import { DocumentsPage } from "@src/pages/DocumentsPage"
}

route DocumentRoute { path: "/documents/:documentId", to: DocumentPage }
page DocumentPage {
  authRequired: true,
  component: import { DocumentPage } from "@src/pages/DocumentPage"
}

route CreateDocumentRoute { path: "/documents/new", to: CreateDocumentPage }
page CreateDocumentPage {
  authRequired: true,
  component: import { CreateDocumentPage } from "@src/pages/CreateDocumentPage"
}

// Add new shared document route that doesn't require auth
route SharedDocumentRoute { path: "/shared/:documentId", to: SharedDocumentPage }
page SharedDocumentPage {
  component: import { SharedDocumentPage } from "@src/pages/SharedDocumentPage"
}

query getProjects {
  // Specifies where the implementation for the query function is.
  // The path `@src/queries` resolves to `src/queries.ts`.
  // No need to specify an extension.
  fn: import { getProjects } from "@src/queries",
  // Tell Wasp that this query reads from the `Task` entity. Wasp will
  // automatically update the results of this query when tasks are modified.
  entities: [Project, Task, Pitch, Resource]
}

query getProject {
  fn: import { getProject } from "@src/queries",
  entities: [Project, Task, Pitch, Resource]
}

query getProjectTasks {
  fn: import { getProjectTasks } from "@src/queries",
  entities: [Project, Task]
}

query getProjectPitches {
  fn: import { getProjectPitches } from "@src/queries",
  entities: [Project, Pitch]
}

query getProjectResources {
  fn: import { getProjectResources } from "@src/queries",
  entities: [Project, Resource]
}

query getInboxTasks {
  fn: import { getInboxTasks } from "@src/queries",
  entities: [Task]
}

query getInboxResources {
  fn: import { getInboxResources } from "@src/queries",
  entities: [Resource]
}

query getInboxThoughts {
  fn: import { getInboxThoughts } from "@src/queries",
  entities: [Thought]
}

query getDocument {
  fn: import { getDocument } from "@src/queries",
  entities: [Document]
}

query getPublicDocument {
  fn: import { getPublicDocument } from "@src/queries",
  entities: [Document]
}

query getDocuments {
  fn: import { getDocuments } from "@src/queries",
  entities: [Document]
}

query globalSearch {
  fn: import { globalSearch } from "@src/queries",
  entities: [Task, Resource, Thought],
}

action createProject {
  fn: import { createProject } from "@src/queries",
  entities: [Project]
}

action updateProject {
  fn: import { updateProject } from "@src/queries",
  entities: [Project]
}

action deleteProject {
  fn: import { deleteProject } from "@src/queries",
  entities: [Project]
}

action createPitch {
  fn: import { createPitch } from "@src/queries",
  entities: [Project, Pitch]
}

action updatePitch {
  fn: import { updatePitch } from "@src/queries",
  entities: [Pitch]
}

action deletePitch {
  fn: import { deletePitch } from "@src/queries",
  entities: [Pitch]
}

action createTask {
  fn: import { createTask } from "@src/queries",
  entities: [Project, Task]
}

action updateTask {
  fn: import { updateTask } from "@src/queries",
  entities: [Task]
}

action updateTaskStatus {
  fn: import { updateTaskStatus } from "@src/queries",
  entities: [Task]
}

action deleteTask {
  fn: import { deleteTask } from "@src/queries",
  entities: [Task]
}

action createResource {
  fn: import { createResource } from "@src/queries",
  entities: [Project, Resource]
}

action updateResource {
  fn: import { updateResource } from "@src/queries",
  entities: [Resource]
}

action deleteResource {
  fn: import { deleteResource } from "@src/queries",
  entities: [Resource]
}

action moveTask {
  fn: import { moveTask } from "@src/queries",
  entities: [Task, Project]
}

action moveResource {
  fn: import { moveResource } from "@src/queries",
  entities: [Resource, Project]
}

action createDocument {
  fn: import { createDocument } from "@src/queries",
  entities: [Document]
}

action updateDocument {
  fn: import { updateDocument } from "@src/queries",
  entities: [Document]
}

action deleteDocument {
  fn: import { deleteDocument } from "@src/queries",
  entities: [Document]
}

//#region Canvas - Not implemented
action saveCanvas {
  fn: import { saveCanvas } from "@src/queries",
  entities: [Canvas]
}

query loadCanvas {
  fn: import { loadCanvas } from "@src/queries",
  entities: [Canvas]
}

query getCanvases {
  fn: import { getCanvases } from "@src/queries",
  entities: [Canvas]
}

action createCanvas {
  fn: import { createCanvas } from "@src/queries",
  entities: [Canvas]
}

action deleteCanvas {
  fn: import { deleteCanvas } from "@src/queries",
  entities: [Canvas]
}
//#endregion

//#region Project Operations
action updateProjectTaskOrder {
  fn: import { updateProjectTaskOrder } from "@src/queries",
  entities: [Project]
}

action updateProjectResourceOrder {
  fn: import { updateProjectResourceOrder } from "@src/queries",
  entities: [Project]
}
//#endregion

//#region Thought Operations
query getThoughts {
  fn: import { getThoughts } from "@src/queries",
  entities: [Thought]
}

query getThought {
  fn: import { getThought } from "@src/queries",
  entities: [Thought]
}

action createThought {
  fn: import { createThought } from "@src/queries",
  entities: [Project, Thought]
}

action updateThought {
  fn: import { updateThought } from "@src/queries",
  entities: [Project, Thought]
}

action deleteThought {
  fn: import { deleteThought } from "@src/queries",
  entities: [Project, Thought]
}

action moveThought {
  fn: import { moveThought } from "@src/queries",
  entities: [Project, Thought]
}
//#endregion

api getUrlMetadata {
  auth: true,
  fn: import { getUrlMetadata } from "@src/server/apis/urlMetadata",
  httpRoute: (GET, "/api/url-metadata"),
}

apiNamespace urlMetadata {
  middlewareConfigFn: import { urlMetadataNamespaceMiddlewareFn } from "@src/server/apis/urlMetadata",
  path: "/api"
}

// #region Invite Code Operations
// Action to check if an invite code is valid and unclaimed
action checkInviteCode {
  auth: false, // Doesn't require auth to check a code
  fn: import { checkInviteCode } from "@src/queries",
  entities: [InviteCode] // Needs access to InviteCode entity
}

// Action to mark an invite code as claimed after successful signup
action claimInviteCode {
  auth: true, // Requires auth because user just signed up and is logged in
  fn: import { claimInviteCode } from "@src/queries",
  entities: [InviteCode, User] // Needs access to InviteCode and User entities
}

// Action to generate a new invite code for the logged-in user
action generateInviteCode {
  auth: true, // Requires user to be logged in
  fn: import { generateInviteCode } from "@src/queries",
  entities: [InviteCode, User] // Needs access to InviteCode and User entities
}
// #endregion

//#region Away

// Away queries
query getAwayTasks {
  fn: import { getAwayTasks } from "@src/queries",
  entities: [Task]
}
query getAwayResources {
  fn: import { getAwayResources } from "@src/queries",
  entities: [Resource]
}
query getAwayThoughts {
  fn: import { getAwayThoughts } from "@src/queries",
  entities: [Thought]
}

query getAwayTasksByDate {
  fn: import { getAwayTasksByDate } from "@src/queries.ts",
  entities: [Task]
}
query getAwayResourcesByDate {
  fn: import { getAwayResourcesByDate } from "@src/queries.ts",
  entities: [Resource]
}
query getAwayThoughtsByDate {
  fn: import { getAwayThoughtsByDate } from "@src/queries.ts",
  entities: [Thought]
}

query getAwayTasksPaginated {
  fn: import { getAwayTasksPaginated } from "@src/queries.ts",
  entities: [Task]
}
query getAwayResourcesPaginated {
  fn: import { getAwayResourcesPaginated } from "@src/queries.ts",
  entities: [Resource]
}
query getAwayThoughtsPaginated {
  fn: import { getAwayThoughtsPaginated } from "@src/queries.ts",
  entities: [Thought]
}

// Away actions
action sendTaskAway {
  fn: import { sendTaskAway } from "@src/queries",
  entities: [Task]
}
action returnTaskFromAway {
  fn: import { returnTaskFromAway } from "@src/queries",
  entities: [Task]
}
action sendResourceAway {
  fn: import { sendResourceAway } from "@src/queries",
  entities: [Resource]
}
action returnResourceFromAway {
  fn: import { returnResourceFromAway } from "@src/queries",
  entities: [Resource]
}
action sendThoughtAway {
  fn: import { sendThoughtAway } from "@src/queries",
  entities: [Thought]
}
action returnThoughtFromAway {
  fn: import { returnThoughtFromAway } from "@src/queries",
  entities: [Thought]
}

// Away route and page
route AwayRoute { path: "/away", to: AwayPage }
page AwayPage {
  authRequired: true,
  component: import { AwayPage } from "@src/pages/AwayPage"
}

//#endregion